{{- range $val := .Values.clusters }}
{{- if $val.enableClusterWorkloads }}
{{- range $repo := $.Values.clusterWorkloadsRepos }}
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: {{ trimSuffix "-argo" $repo.name }}-{{ $val.environment }}
  namespace: argocd
spec:
  goTemplate: true
  goTemplateOptions: [ "missingkey=error" ]
  generators:
    - matrix:
        generators:
          - matrix:
              generators:
                - git:
                    repoURL: {{ $repo.repoUrl }}
                    revision: {{ $repo.branch | default "main" }}
                    files:
                      - path: "workloads/{{ $val.environment }}/*/config.json"
                    pathParamPrefix: config
                    requeueAfterSeconds: {{ $repo.gitRequeue | default 1200 }}
                - git:
                    repoURL: {{ $repo.repoUrl }}
                    revision: {{ $repo.branch | default "main" }}
                    files:
                      - path: "base/{{ "{{.appName}}" }}/config.json"
                    pathParamPrefix: appConfig
                    requeueAfterSeconds: {{ $repo.gitRequeue | default 1200 }}
          - plugin:
              configMapRef:
                name: configmap-plugin
              input:
                parameters:
                  branch: {{ $repo.branch | default "main" }}
                  repo_path: "onyx-cd/{{ $repo.name }}"
                  folder_path: '{{ "{{.configPath | default \"\"}}" }}' #Provided by git file generator
              requeueAfterSeconds: {{ $repo.pluginRequeueInterval | default 1200 }}
  syncPolicy:
    preserveResourcesOnDeletion: {{ hasKey $repo "preserveResourcesOnDeletion" | ternary $repo.preserveResourcesOnDeletion true }}
  strategy:
  {{- if $repo.rollingSync }}
    type: RollingSync
    rollingSync:
      steps:
        - matchExpressions:
            - key: syncWave
              operator: In
              values:
                - zero
          maxUpdate: 100%
        - matchExpressions:
            - key: syncWave
              operator: In
              values:
                - one
          maxUpdate: 100%
        - matchExpressions:
            - key: syncWave
              operator: In
              values:
                - two
          maxUpdate: 100%
        - matchExpressions:
            - key: syncWave
              operator: In
              values:
                - four
          maxUpdate: 100%
  {{- else }}
    type: AllAtOnce
  {{- end }} 
  template:
    metadata:
      name: '{{ "{{.appName}}" }}-{{ "{{.config.path.basename}}" }}-{{$val.environment}}'
      {{- if $val.enableServerSideDiff }} 
      annotations:
        argocd.argoproj.io/compare-options: ServerSideDiff=true
      {{- end }}
      labels:
        syncWave: {{ "'{{.syncwave | default \"one\" }}'" }}
    spec:
      project: {{ $val.environment }}-{{ trimSuffix "-argo" $repo.name }}-project
      sources:
        - repoURL: {{ $repo.repoUrl }}
          targetRevision: {{ $repo.branch | default "main" }}
          ref: values
      destination:
        name: {{ $val.clusterName }}
        namespace: {{ "'{{.config.path.basename}}'" }}
      syncPolicy:
        {{- if eq $val.environment "dev" }} # auto sync is enabled only on dev environment
        automated:
          prune: true
          #selfHeal: true
          allowEmpty: true
        {{- end }}
        syncOptions:
          - CreateNamespace=true
        retry:
          limit: 2
          backoff:
            duration: 1m
            factor: 2
            maxDuration: 7m
      ignoreDifferences:
        - jsonPointers:
            - /spec/storageClassName
          kind: PersistentVolumeClaim
  templatePatch: |
    spec:
      sources:
        - repoURL: {{ "'{{.repoURL}}'" }}
          targetRevision: {{ "'{{.chartVersion}}'" }}
          chart: {{ "'{{.chart}}'" }}
          helm:
            releaseName: {{ "{{.appName}}" }}-{{ "{{.config.path.basename}}" }}
            passCredentials: true
            parameters:
              - name: awsDeploymentRegion
                value: {{ $.Values.awsDeploymentRegion }}
              - name: awsDeploymentEnvironment
                value: {{ $val.environment }}
              - name: awsDeploymentAccount
                value: {{ $val.awsAccount | quote }}
              - name: vpcEndpointCidr
                value: {{ $val.vpcCidr  }}
            {{"{{- if .contents }}"}}
            {{"{{- range $fileName, $fileContents := .contents }}"}}
              - name: 'configMapFiles.{{"{{ $fileName | replace \".\" \\\\\.\ }}"}}.data'
                value: {{ "'{{ $fileContents }}'" }}
            {{"{{- end }}"}}
              - name: "name"
                value: {{ "'{{.name}}'" }}
            {{"{{- end }}"}}
            valueFiles:
              - {{ "$values/{{.valuesPath}}" }}
              - {{ "$values/{{.config.path.path}}/{{.appName}}/{{.appName}}.yaml" }}
        - repoURL: {{ $repo.repoUrl }}
          targetRevision: {{ $repo.branch | default "main" }}
          ref: values
---
{{- end }}
{{- end }}
{{- end }}